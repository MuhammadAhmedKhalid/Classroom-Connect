@using Microsoft.AspNetCore.Identity
@using Classroom.Models;
@using Microsoft.AspNetCore.Mvc.Rendering;

@inject UserManager<ApplicationUser> UserManager
@model Classroom.Models.Assignment

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var isCreator = Model.Class?.CreatedById == currentUser?.Id;
    var hasSubmitted = ViewBag.HasSubmitted ?? false;
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start">
            <h2 class="card-title">@Model.Title</h2>

            @if (!isCreator)
            {
                @if (hasSubmitted)
                {
                    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <strong class="font-bold">Submitted!</strong>
                        <span class="block sm:inline">You have already submitted this assignment.</span>
                    </div>
                }
                else
                {
                    <form method="post" enctype="multipart/form-data" asp-controller="AssignmentSubmission" asp-action="Submission" asp-route-id="@Model.Id" class="d-flex align-items-center gap-2">
                        @Html.AntiForgeryToken()
                        <label for="WordDocument" class="form-label mb-0">Attach File:</label>
                        <input type="file" class="form-control form-control-sm w-auto" id="WordDocument" name="WordDocument" accept=".doc,.docx" required />
                        <input type="hidden" name="AssignmentId" value="@Model.Id" />
                        <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                    </form>                    
                }
            }
            else
            {
                <a asp-action="Details" asp-controller="AssignmentSubmission" asp-route-assignmentId="@Model.Id" class="btn btn-primary btn-sm">View Submissions</a>
            }
        </div>

        <p class="card-text mt-3"><strong>Instructions:</strong> @(string.IsNullOrEmpty(Model.Instructions) ? "No instructions provided." : Model.Instructions)</p>
        <p class="card-text"><strong>Due Date:</strong> @(Model.DueDate.HasValue ? Model.DueDate.Value.ToString("MMMM dd, yyyy hh:mm tt") : "Not set")</p>
        <p class="card-text"><strong>Posted At:</strong> @Model.PostedAt?.ToString("MMMM dd, yyyy hh:mm tt")</p>
        <p class="card-text"><strong>Class:</strong> @Model.Class?.Name</p>

        <div id="file-error" class="text-danger mt-2" style="display:none;"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelector('form')?.addEventListener('submit', function (e) {
            const fileInput = document.getElementById('WordDocument');
            const fileError = document.getElementById('file-error');
            const maxFileSizeInBytes = 16 * 1024 * 1024; // 16MB

            if (fileInput.files.length === 0) {
                fileError.textContent = "Please select a file to upload.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            const file = fileInput.files[0];

            if (file.size > maxFileSizeInBytes) {
                fileError.textContent = "File size exceeds the maximum limit of 16MB.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            const allowedFileTypes = ['.doc', '.docx'];
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

            if (!allowedFileTypes.includes(fileExtension)) {
                fileError.textContent = "Invalid file type. Please upload a .doc or .docx file.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            fileError.style.display = "none";
        });
    </script>
}
