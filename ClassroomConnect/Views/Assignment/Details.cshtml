@using Microsoft.AspNetCore.Identity
@using Classroom.Models;
@using Microsoft.AspNetCore.Mvc.Rendering;

@inject UserManager<ApplicationUser> UserManager
@model Classroom.Models.Assignment

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var isCreator = Model.Class?.CreatedById == currentUser?.Id;
    var hasSubmitted = ViewBag.HasSubmitted ?? false;
    var isClosed = ViewBag.IsClosed ?? false;
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<div class="card mb-4">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-start mb-3">
            <h2 class="card-title">@Model.Title</h2>
            <div class="d-none d-md-flex gap-2">
                @if (isCreator)
                {
                    <a asp-action="Details" asp-controller="AssignmentSubmission" asp-route-assignmentId="@Model.Id" class="btn btn-outline-primary btn-sm"><i class="bi bi-collection"></i> View Submissions</a>
                    <a asp-action="Edit" asp-controller="Assignment" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary"><i class="bi bi-pencil-square"></i> Edit</a>
                    <button class="btn btn-sm btn-outline-danger delete-button"
                            data-url="@Url.Action("Delete", "Assignment", new { id = @Model.Id })"
                            data-item-name="assignment">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
            </div>
        </div>

        <p class="card-text"><strong>Instructions:</strong> @(string.IsNullOrEmpty(Model.Instructions) ? "No instructions provided." : Model.Instructions)</p>
        <p class="card-text"><strong>Due Date:</strong> @(Model.DueDate.HasValue ? Model.DueDate.Value.ToString("MMMM dd, yyyy hh:mm tt") : "Not set")</p>
        <p class="card-text"><strong>Close Date:</strong> @(Model.CloseDate.HasValue ? Model.CloseDate.Value.ToString("MMMM dd, yyyy hh:mm tt") : "Not set")</p>
        <p class="card-text"><strong>Posted At:</strong> @Model.PostedAt?.ToString("MMMM dd, yyyy hh:mm tt")</p>
        <p class="card-text"><strong>Class:</strong> @Model.Class?.Name</p>

        <div class="d-flex d-md-none justify-content-end gap-2 flex-wrap mt-3">
            @if (isCreator)
            {
                <a asp-action="Details" asp-controller="AssignmentSubmission" asp-route-assignmentId="@Model.Id" class="btn btn-outline-primary btn-sm"><i class="bi bi-collection"></i> <span class="d-none d-sm-inline">Submissions</span></a>
                <a asp-action="Edit" asp-controller="Assignment" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary"><i class="bi bi-pencil-square"></i> <span class="d-none d-sm-inline">Edit</span></a>
                <button class="btn btn-sm btn-outline-danger delete-button"
                        data-url="@Url.Action("Delete", "Assignment", new { id = @Model.Id })"
                        data-item-name="assignment">
                    <i class="bi bi-trash"></i> <span class="d-none d-sm-inline">Delete</span>
                </button>
            }
        </div>
    </div>
</div>

@if (!isCreator)
{
    <div class="card mb-4">
        <div class="card-header">
            Submit Your Work
        </div>
        <div class="card-body">
            <div id="submissionArea">
                @if (hasSubmitted)
                {
                    <div class="alert alert-success" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        <strong>Submitted!</strong> You have already submitted this assignment.
                    </div>
                }
                else
                {
                    @if (isClosed)
                    {
                        <div class="alert alert-warning" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <strong>Closed!</strong> This assignment is now closed for submissions.
                        </div>
                    }
                    else
                    {
                        <form method="post" enctype="multipart/form-data"
                              asp-controller="AssignmentSubmission"
                              asp-action="Submission"
                              asp-route-id="@Model.Id"
                              class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-2 gap-md-3">
                            @Html.AntiForgeryToken()
                            <div class="w-100">
                                <label for="WordDocument" class="form-label mb-1">Attach File:</label>
                                <input type="file"
                                       class="form-control form-control-sm"
                                       id="WordDocument"
                                       name="WordDocument"
                                       accept=".doc,.docx"
                                       required />
                                <div id="file-error" class="text-danger mt-1" style="display:none;"></div>
                                <small class="form-text text-muted">Only .doc and .docx files allowed (max 16MB)</small>
                            </div>
                            <input type="hidden" name="AssignmentId" value="@Model.Id" />
                            <div class="d-flex flex-column flex-md-row gap-2 w-100 w-md-auto mt-2 mt-md-0">
                                <button type="submit" class="btn btn-primary btn-sm flex-grow-1 flex-md-grow-0">
                                    <i class="bi bi-upload me-1"></i> Submit
                                </button>
                            </div>
                        </form>
                    }
                }
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        const assignmentId = @Model.Id;
        const submissionArea = document.getElementById('submissionArea');
        const initialRemainingSeconds = @(ViewBag.RemainingSeconds ?? 0); 
        const isAssignmentInitiallyClosed = @(ViewBag.IsClosed?.ToString().ToLower() ?? "false");

        let intervalId = null;

        function checkAssignmentStatus() {
            fetch(`/Assignment/IsAssignmentClosed?id=${assignmentId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isClosed) {
                        submissionArea.innerHTML = `
                            <div class="alert alert-warning" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                <strong>Closed!</strong> This assignment is now closed for submissions.
                            </div>
                        `;
                        if (intervalId !== null) {
                            clearInterval(intervalId);
                            intervalId = null;
                        }
                    }
                })
                .catch(error => {
                    console.error("Error checking assignment status:", error);
                });
        }

        if (parseInt(initialRemainingSeconds) > 0) {
            checkAssignmentStatus(); 
            intervalId = setInterval(checkAssignmentStatus, parseInt(initialRemainingSeconds) * 1000);
        } else if (isAssignmentInitiallyClosed === 'true') {
            submissionArea.innerHTML = `
                <div class="alert alert-warning" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Closed!</strong> This assignment is now closed for submissions.
                </div>
            `;
        }

        document.querySelector('form')?.addEventListener('submit', function (e) {
            const fileInput = document.getElementById('WordDocument');
            const fileError = document.getElementById('file-error');
            const maxFileSizeInBytes = 16 * 1024 * 1024; // 16MB

            if (fileInput.files.length === 0) {
                fileError.textContent = "Please select a file to upload.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            const file = fileInput.files[0];

            if (file.size > maxFileSizeInBytes) {
                fileError.textContent = "File size exceeds the maximum limit of 16MB.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            const allowedFileTypes = ['.doc', '.docx'];
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

            if (!allowedFileTypes.includes(fileExtension)) {
                fileError.textContent = "Invalid file type. Please upload a .doc or .docx file.";
                fileError.style.display = "block";
                e.preventDefault();
                return;
            }

            fileError.style.display = "none";
        });
    </script>
}