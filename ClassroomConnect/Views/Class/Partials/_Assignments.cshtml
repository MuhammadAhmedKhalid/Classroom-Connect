@using Microsoft.AspNetCore.Identity
@using Classroom.Models

@inject UserManager<ApplicationUser> UserManager

@model Classroom.Models.ViewModels.ClassDetailsVM

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var isCreator = Model.Class?.CreatedById == currentUser?.Id;
}

<div class="class-section p-3 p-md-4 border rounded">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2 mb-3">
        <h2 class="section-header">Assignments</h2>

        <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-2 search-parent">
            <input type="text" class="form-control form-control-sm w-100 w-md-auto" id="assignmentSearchInput" name="searchTerm" placeholder="Search assignments...">

            @if (isCreator)
            {
                <a asp-controller="Assignment" asp-action="Create" asp-route-classId="@Model.Class?.Id" class="btn btn-sm btn-success w-100 w-md-auto">
                    <i class="bi bi-plus"></i> New Assignment
                </a>
            }
        </div>
    </div>

    <hr />

    @if (Model.Assignments?.Any() == true)
    {
        <div class="list-group" id="assignmentsList">
            @foreach (var assignment in Model.Assignments)
            {
                <a asp-controller="Assignment" asp-action="Details" asp-route-id="@assignment.Id"
                   class="list-group-item list-group-item-action assignment-item">
                    <div class="d-flex flex-column flex-sm-row justify-content-between">
                        <h5 class="mb-1 assignment-title">@assignment.Title</h5>
                        <small class="text-sm-end mt-2 mt-sm-0">
                            @if (!string.IsNullOrWhiteSpace(assignment.DueDate.ToString()))
                            {
                                <div>Due Date: @assignment.DueDate.ToString()<br /></div>
                            }
                            @if (!string.IsNullOrWhiteSpace(assignment.CloseDate.ToString()))
                            {
                                <div>Close Date: @assignment.CloseDate.ToString()</div>
                            }
                        </small>
                    </div>
                    <p class="mb-1 assignment-instructions">@assignment.Instructions</p>
                    <small class="text-muted">Posted: @assignment.PostedAt.ToString()</small>
                </a>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            No assignments have been posted yet.
        </div>
    }
</div>

<script>
    const assignmentSearchInput = document.getElementById('assignmentSearchInput');
    const assignmentsList = document.getElementById('assignmentsList');
    const assignmentItems = document.querySelectorAll('.assignment-item');

    assignmentSearchInput.addEventListener('input', function () {
        const searchTerm = this.value.toLowerCase();

        assignmentItems.forEach(item => {
            const title = item.querySelector('.assignment-title').textContent.toLowerCase();
            const instructions = item.querySelector('.assignment-instructions').textContent.toLowerCase();
            const shouldShow = title.includes(searchTerm) || instructions.includes(searchTerm);
            item.style.display = shouldShow ? '' : 'none';
        });
    });
</script>

<style>
    @@media (max-width: 576px) {
        .section-header {
            font-size: 1.25rem;
        }

        .assignment-title {
            font-size: 1rem;
        }

        .assignment-instructions {
            font-size: 0.95rem;
        }

        .search-parent {
            width: 100%;
        }

        .list-group-item {
            padding: 1rem;
        }
    }
</style>
