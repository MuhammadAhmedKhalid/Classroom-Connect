@using Microsoft.AspNetCore.Identity
@using Classroom.Models

@inject UserManager<ApplicationUser> UserManager

@model Classroom.Models.ViewModels.ClassDetailsVM

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var isClassCreator = Model.Class?.CreatedById == currentUser?.Id;
}

<form id="anti-forgery-form" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<div class="class-section p-4 border rounded">
    <div class="d-flex justify-content-between align-items-center">
        <h2 class="section-header">Class Members</h2>
        <div class="d-flex align-items-center">
            <div class="me-3">
                <div class="mb-1">
                    <label for="searchInput" class="form-label visually-hidden">Search Members</label>
                </div>
                <input type="text" class="form-control form-control-sm" id="searchInput" name="searchTerm" placeholder="Search members...">
            </div>
            @if (isClassCreator)
            {
                <button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#addMemberModal">
                    + Add Member
                </button>
            }
        </div>
        <div class="modal fade" id="addMemberModal" tabindex="-1" aria-labelledby="addMemberModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addMemberModalLabel">Add New Member</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addMemberForm" asp-action="AddMember" asp-controller="Class" asp-route-classId="@Model.Class.Id" method="post">
                            @Html.AntiForgeryToken()
                            <div class="mb-3">
                                <label for="MemberIdentifier" class="form-label">Email</label>
                                <input type="text" class="form-control" id="MemberIdentifier" name="identifier" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Add Member</button>
                        </form>
                        <div id="addMemberResult" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

    @if (Model.ClassMembers?.Any() == true)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="searchable">Name</th>
                    <th class="searchable">Email</th>
                    <th>Joined Date</th>
                    @if (isClassCreator)
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var member in Model.ClassMembers)
                {
                    var isMe = member.User?.Id == currentUser?.Id;

                    <tr>
                        <td>
                            @member.User?.Name
                            @(isMe ? " (Me)" : "")
                        </td>
                        <td>@member.User?.Email</td>
                        <td>@member.JoinedAt.ToString("MMMM dd, yyyy hh:mm tt")</td>
                        <td>
                            @if (isClassCreator)
                            {
                                <form asp-action="RemoveMember" asp-controller="Class" method="post" class="d-inline">
                                    <input type="hidden" name="classId" value="@Model.Class.Id" />
                                    <input type="hidden" name="memberId" value="@member.User?.Id" />
                                    <button type="button"
                                            class="btn btn-sm btn-outline-danger delete-button"
                                            data-url="@Url.Action("RemoveMember", "Class", new { classId = Model.Class.Id, memberId = member.User?.Id })"
                                            data-title='Are you sure you want to remove @member.User?.Name?'>
                                        <i class="bi bi-person-x"></i> Remove
                                    </button>
                                </form>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">
            No members have joined this class yet.
        </div>
    }
</div>

<script>
    const addMemberForm = document.getElementById("addMemberForm");
    const addMemberModal = document.getElementById("addMemberModal");
    const resultDiv = document.getElementById("addMemberResult");
    const searchInput = document.getElementById('searchInput');
    const memberTable = document.querySelector('.table tbody');
    const tableRows = memberTable.querySelectorAll('tr');
    const searchableColumns = Array.from(document.querySelectorAll('.searchable')).map(th => th.cellIndex);

    addMemberForm.addEventListener("submit", function (e) {
        e.preventDefault();

        const formData = new FormData(addMemberForm);
        const token = addMemberForm.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(addMemberForm.action, {
            method: "POST",
            body: formData,
            headers: {
                'RequestVerificationToken': token
            }
        })
        .then(response => response.json())
        .then(data => {
            resultDiv.innerHTML = `<div class="alert ${data.success ? 'alert-success' : 'alert-danger'} mt-2">${data.message}</div>`;

            if (data.success) {
                addMemberForm.reset();
                setTimeout(() => {
                    location.reload();
                }, 1500);
            }
        })
        .catch(error => {
            resultDiv.innerHTML = `<div class="alert alert-danger mt-2">An error occurred. Please try again.</div>`;
            console.error('Error:', error);
        });
    });

    addMemberModal.addEventListener('hidden.bs.modal', function () {
        addMemberForm.reset();
        resultDiv.innerHTML = "";
    });

    searchInput.addEventListener('input', function () {
        const searchTerm = this.value.toLowerCase();

        tableRows.forEach(row => {
            let found = false;
            searchableColumns.forEach(index => {
                if (row.cells[index] && row.cells[index].textContent.toLowerCase().includes(searchTerm)) {
                    found = true;
                }
            });
            row.style.display = found ? '' : 'none';
        });
    });
</script>