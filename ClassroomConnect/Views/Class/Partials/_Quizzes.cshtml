@using Microsoft.AspNetCore.Identity
@using Classroom.Models

@inject UserManager<ApplicationUser> UserManager

@model Classroom.Models.ViewModels.ClassDetailsVM

@{
    var currentUser = await UserManager.GetUserAsync(User);
    var isCreator = Model.Class?.CreatedById == currentUser?.Id;
}

<div class="class-section p-3 p-md-4 border rounded">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2 mb-3">
        <h2 class="section-header">Quizzes</h2>

        <div class="d-flex flex-column flex-md-row align-items-start align-items-md-center gap-2 search-parent">
            <input type="text" class="form-control form-control-sm w-100 w-md-auto" id="quizSearchInput" name="searchTerm" placeholder="Search quizzes...">
            @if (isCreator)
            {
                <a asp-controller="Quiz" asp-action="Create" asp-route-classId="@Model.Class?.Id" class="btn btn-sm btn-success w-100 w-md-auto">
                    <i class="bi bi-plus"></i> New Quiz
                </a>
            }
        </div>
    </div>
    <hr />

    @if (Model.Quizzes?.Any() == true)
    {
        <div class="list-group" id="quizzesList">
            @foreach (var quiz in Model.Quizzes)
            {
                <a asp-controller="Quiz" asp-action="Details" asp-route-id="@quiz.Id"
                   class="list-group-item list-group-item-action quiz-item">
                    <div class="d-flex flex-column flex-md-row justify-content-between gap-1">
                        <h5 class="mb-1 quiz-title">@quiz.Title</h5>
                        <small class="text-md-end">
                            @if (!string.IsNullOrWhiteSpace(quiz.DueDate.ToString()))
                            {
                                <span>Due Date: @quiz.DueDate.ToString()<br /></span>
                            }
                            @if (!string.IsNullOrWhiteSpace(quiz.CloseDate.ToString()))
                            {
                                <span>Close Date: @quiz.CloseDate.ToString()</span>
                            }
                        </small>
                    </div>
                    <p class="mb-1 quiz-instructions">@quiz.Instructions</p>
                    <small class="text-muted">Posted: @quiz.PostedAt.ToString()</small>
                </a>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            No quizzes have been created yet.
        </div>
    }
</div>

<script>
    const quizSearchInput = document.getElementById('quizSearchInput');
    const quizItems = document.querySelectorAll('.quiz-item');

    quizSearchInput.addEventListener('input', function () {
        const searchTerm = this.value.toLowerCase();

        quizItems.forEach(item => {
            const title = item.querySelector('.quiz-title').textContent.toLowerCase();
            const instructions = item.querySelector('.quiz-instructions').textContent.toLowerCase();
            const shouldShow = title.includes(searchTerm) || instructions.includes(searchTerm);
            item.style.display = shouldShow ? '' : 'none';
        });
    });
</script>

<style>
    @@media (max-width: 576px) {
        .section-header {
            font-size: 1.25rem;
        }

        .search-parent {
            width: 100%;
        }
    }
</style>
